# Macros for AltCCRPMs

# Initialize AltCCRPMs - called from the start of the spec file
# Options:
#  -m moduleversion - Use with MPI Implementations - defines MODULEPATH
#  -n name - Name of package (or use %{shortname}
#  -p prefix - Alternate prefix name
#  -v version - Version of package (or use %{ver})
#  -f - Use full compiler version for package name/prefix
%altcc_init(fm:n:p:v:) %{lua:
  -- Global parameters
  altcc_path_prefix = "/opt"
  altcc_modulefiles_path = altcc_path_prefix.."/modulefiles"
  altcc_compiler_modulefiles_path = altcc_modulefiles_path.."/Compiler"
  altcc_mpi_modulefiles_path = altcc_modulefiles_path.."/MPI"
  -- Handle arguments
  altcc_name = ""
  if (rpm.expand("%{-n}") ~= "") then
    altcc_name = rpm.expand("%{-n*}")
  else
    altcc_name = rpm.expand("%{?shortname}")
  end
  if (altcc_name == "") then
    print("%altcc_init: ERROR: Need to pass name with -n or define %shortname!")
  end
  local version = ""
  if (rpm.expand("%{-v}") ~= "") then
    version = rpm.expand("%{-v*}")
  else
    version = rpm.expand("%{?ver}")
  end
  if (version == "") then
    print("%altcc_init: ERROR: Need to pass version with -v or define %ver!")
  end
  local name_ver = altcc_name.."-"..version
  if (rpm.expand("%{-p}") ~= "") then
    altcc_prefix_dir = rpm.expand("%{-p*}")
  else
    altcc_prefix_dir = name_ver
  end
  -- Set environment and macros
  altcc_cc_name = os.getenv("COMPILER_NAME")
  if (altcc_cc_name == nil) then
    altcc_cc_name = ""
  end
  altcc_modulepath = nil
  altcc_mpi_version = nil
  if (altcc_cc_name ~= "") then
    altcc = true
    rpm.define("altcc 1")
    rpm.define("altcc_cc_name "..altcc_cc_name)
    if (rpm.expand("%{-f}") ~= "") then
      altcc_cc_version = os.getenv("COMPILER_VERSION_FULL")
    else
      altcc_cc_version = os.getenv("COMPILER_VERSION")
    end
    altcc_cc_name_ver = altcc_cc_name.."-"..altcc_cc_version
    -- altcc_cc_dep_suffix is used for non-MPI deps in an MPI package
    rpm.define("altcc_cc_dep_suffix -"..altcc_cc_name_ver)
    -- If we are instaling into a different prefix, we do not distinguish based
    -- on this package's version
    if (rpm.expand("%{-p}") ~= "") then
      altcc_pkg_suffix = "-"..altcc_cc_name_ver
    else
      altcc_pkg_suffix = "-"..version.."-"..altcc_cc_name_ver
    end
    altcc_name_suffix = "-"..altcc_cc_name
    altcc_dep_suffix = "-"..altcc_cc_name_ver
    altcc_mpi_name = os.getenv("MPI_NAME")
    if (altcc_mpi_name == nil or altcc_mpi_name == "") then
      rpm.define("altcc_with_mpi 0")
      altcc_prefix = altcc_path_prefix.."/"..altcc_cc_name_ver.."/"..altcc_prefix_dir
      altcc_modulefiledir = altcc_compiler_modulefiles_path.."/"..altcc_cc_name.."/"..altcc_cc_version.."/"..altcc_name
      -- If we are an MPI implementation
      if (rpm.expand("%{-m}") ~= "") then
        altcc_mpi_version = rpm.expand("%{-m*}")
        altcc_mpi_prefix = altcc_path_prefix.."/"..altcc_cc_name_ver.."/"..altcc_name.."-"..altcc_mpi_version
        altcc_mpi_suffix = "-"..altcc_mpi_version.."-"..altcc_cc_name_ver
        altcc_modulepath = altcc_mpi_modulefiles_path.."/"..altcc_cc_name.."/"..altcc_cc_version.."/"..altcc_name.."/"..altcc_mpi_version
      end
    else
      rpm.define("altcc_with_mpi 1")
      rpm.define("altcc_mpi_name "..altcc_mpi_name)
      altcc_mpi_version = os.getenv("MPI_VERSION")
      altcc_mpi_name_ver = altcc_mpi_name.."-"..altcc_mpi_version
      altcc_name_suffix = altcc_name_suffix.."-"..altcc_mpi_name
      altcc_dep_suffix = altcc_dep_suffix.."-"..altcc_mpi_name_ver
      altcc_pkg_suffix = altcc_pkg_suffix.."-"..altcc_mpi_name_ver
      altcc_prefix = altcc_path_prefix.."/"..altcc_cc_name_ver.."/"..altcc_mpi_name_ver.."/"..altcc_prefix_dir
      altcc_modulefiledir = altcc_mpi_modulefiles_path.."/"..altcc_cc_name.."/"..altcc_cc_version.."/"..altcc_mpi_name.."/"..altcc_mpi_version.."/"..altcc_name
    end
    rpm.define("altcc_name_suffix "..altcc_name_suffix)
    rpm.define("altcc_dep_suffix "..altcc_dep_suffix)
    rpm.define("altcc_pkg_suffix "..altcc_pkg_suffix)
    rpm.define("_prefix "..altcc_prefix)
    rpm.define("_sysconfdir "..altcc_prefix.."/etc")
    print(rpm.expand("%undefine _missing_build_ids_terminate_build"))
  else
    altcc = false
  end
}

# Emit version-less provides for easy installation of latest version
# Options:
#  -n name - Use alternate name for provides
%altcc_provide(n:) %{lua:
  if (not altcc) then
    return
  end
  local name = rpm.expand("%{-n*}")
  if (name == "") then
    name = altcc_name
  end
  local suffix = rpm.expand("%{?1:%{1}}")
  if (suffix ~= "" and string.sub(suffix,1,1) ~= "-") then
    suffix = "-"..suffix
  end
  print("Provides: "..name..altcc_name_suffix..suffix..rpm.expand(" = %{version}-%{release}").."\\n")
  print("Provides: "..name..altcc_name_suffix..suffix..rpm.expand("%{?_isa} = %{version}-%{release}").."\\n")
  print("Provides: "..name..altcc_dep_suffix..suffix..rpm.expand(" = %{version}-%{release}").."\\n")
  print("Provides: "..name..altcc_dep_suffix..suffix..rpm.expand("%{?_isa} = %{version}-%{release}").."\\n")
  if (altcc_mpi_suffix ~= nil) then
    print("Provides: "..name..altcc_mpi_suffix..suffix..rpm.expand(" = %{version}-%{release}").."\\n")
    print("Provides: "..name..altcc_mpi_suffix..suffix..rpm.expand("%{?_isa} = %{version}-%{release}").."\\n")
  end
}

# Emit the requires on environment(modules) - called from the package that
# the modulefile
%altcc_reqmodules() %{lua:
  if (altcc) then
    print("Requires:       environment(modules)\\n")
  end
}

# Emit the requires the mpi devel package if needed - called from devel packages
%altcc_reqmpi() %{lua:
  if (altcc and altcc_mpi_name_ver ~= nil) then
    print("Requires: "..altcc_mpi_name_ver.."-"..altcc_cc_name_ver..rpm.expand("-devel%{?_isa}\\n"))
  end
}

# Make the environment-modules file - must be given the source of the file
%altcc_writemodule() %{lua:
  if (not altcc) then
    return
  end
  print("mkdir -p "..rpm.expand("%{buildroot}")..altcc_modulefiledir.."\\n")
  print(rpm.expand("sed -e 's#@PREFIX@#%{_prefix}#g;s#@LIB@#%{_lib}#g;s#@LIBDIR@#%{_libdir}#g;s#@ETCDIR@#%{_sysconfdir}#g;s#@FMODDIR@#%{_libdir}#g;s#@INCDIR@#%{_includedir}#g;s#@MANDIR@#%{_mandir}#g;s#@DATADIR@#%{_datadir}#g;\\n"))
  if (altcc_modulepath ~= nil) then
    print("s#@MODULEPATH@#"..altcc_modulepath.."#;\\n")
  end
  if (altcc_mpi_version ~= nil) then
    print("s#@MPI_VERSION@#"..altcc_mpi_version.."#;\\n")
  end
  print(rpm.expand("s#@PY2SITEARCH@#%{_libdir}/python%{python2_version}/site-packages#;s#@PY3SITEARCH@#%{_libdir}/python%{python3_version}/site-packages#;s#@COMPILER@#openmpi-"..altcc_cc_name.."#g;s#@SUFFIX@#-"..altcc_name.."_openmpi#g' < %{1} > %{buildroot}"..altcc_modulefiledir.."/%{version}\\n"))
  if (altcc_modulepath ~= nil) then
    print("mkdir -p "..rpm.expand("%{buildroot}")..altcc_modulepath.."\\n")
    print("mkdir -p "..rpm.expand("%{buildroot}")..altcc_mpi_prefix.."\\n")
  end
}

# Create the doc directory
%altcc_doc() %{lua:
  if (altcc) then
    print("mkdir -p "..rpm.expand("%{buildroot}/%{_defaultdocdir}\\n"))
  end
}

# Create the license directory
%altcc_license() %{lua:
  if (altcc and rpm.expand("%{?_licensedir}") ~= "") then
    print("mkdir -p "..rpm.expand("%{buildroot}/%{_licensedir}\\n"))
  end
}

# Emit %files entries to own the prefix and any other directories given.
# Add -d option for package(s) containing a %doc file.
# Add -l option for package(s) containing a %license file.
# Add -m option for package containing the module file.
%altcc_files(dlm) %{lua:
  if (not altcc) then
    return
  end
  -- Package with the module file is considered primary and owns %_prefix
  if (rpm.expand("%{-m}") ~= "") then
    print("%dir "..altcc_prefix.."\\n")
  end
  local arg
  local files = {}
  local prefix_len = string.len(altcc_prefix)
  local args = rpm.expand('%*')
  if (rpm.expand("%{-d}") ~= "") then
    args = args.." "..rpm.expand("%{_defaultdocdir}")
  end
  if (rpm.expand("%{-l}") ~= "" and rpm.expand("%{?_licensedir}") ~= "") then
    args = args.." "..rpm.expand("%{_licensedir}")
  end
  for arg in args:gmatch('%S+') do
    local f = rpm.expand(arg)
    files[f] = true
    -- Own parent directories if in prefix
    if string.sub(f,1,prefix_len) == altcc_prefix then
      local subdirs =  string.sub(f,prefix_len+1,-1)
      local dir = altcc_prefix
      for item in subdirs:gmatch('[^/]+') do
        dir = dir.."/"..item
        if files[dir] == nil then
          files[dir] = true
          print("%dir "..dir.."\\n")
        end
      end
    end
    print("%dir "..f.."\\n")
  end
  if (rpm.expand("%{-m}") ~= "") then
    print(altcc_modulefiledir.."\\n")
    if (altcc_modulepath ~= nil) then
      print(altcc_mpi_modulefiles_path.."\\n")
      print(altcc_mpi_prefix.."\\n")
    end
  end
}
